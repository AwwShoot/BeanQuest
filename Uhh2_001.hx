package arm.node;

@:keep class Uhh2_001 extends armory.logicnode.LogicTree {

	var functionNodes:Map<String, armory.logicnode.FunctionNode>;

	var functionOutputNodes:Map<String, armory.logicnode.FunctionOutputNode>;

	public function new() {
		super();
		name = "Uhh2_001";
		this.functionNodes = new Map();
		this.functionOutputNodes = new Map();
		notifyOnAdd(add);
	}

	override public function add() {
		var _ApplyForce_001 = new armory.logicnode.ApplyForceNode(this);
		var _Keyboard_001 = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard_001.property0 = "down";
		_Keyboard_001.property1 = "s";
		_Keyboard_001.addOutputs([_ApplyForce_001]);
		var _Boolean_002 = new armory.logicnode.BooleanNode(this);
		_Boolean_002.addInput(_Keyboard_001, 1);
		var _Math_001 = new armory.logicnode.MathNode(this);
		_Math_001.property0 = "Add";
		_Math_001.property1 = "true";
		var _Integer_001 = new armory.logicnode.IntegerNode(this);
		_Integer_001.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_001.addOutputs([_Math_001]);
		_Math_001.addInput(_Integer_001, 0);
		_Math_001.addInput(_Boolean_002, 0);
		var _MathExpression = new armory.logicnode.MathExpressionNode(this);
		_MathExpression.property0 = "(a-b)*50";
		_MathExpression.property1 = false;
		var _Math = new armory.logicnode.MathNode(this);
		_Math.property0 = "Add";
		_Math.property1 = "false";
		var _Integer = new armory.logicnode.IntegerNode(this);
		_Integer.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer.addOutputs([_Math]);
		_Math.addInput(_Integer, 0);
		var _Boolean = new armory.logicnode.BooleanNode(this);
		var _Keyboard_016 = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard_016.property0 = "down";
		_Keyboard_016.property1 = "w";
		var _ApplyForce = new armory.logicnode.ApplyForceNode(this);
		_ApplyForce.addInput(_Keyboard_016, 0);
		_ApplyForce.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_ApplyForce.addInput(new armory.logicnode.VectorNode(this, 10.0, 0.0, 0.0), 0);
		_ApplyForce.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce.addOutputs([new armory.logicnode.NullNode(this)]);
		_Keyboard_016.addOutputs([_ApplyForce]);
		_Keyboard_016.addOutputs([_Boolean]);
		_Boolean.addInput(_Keyboard_016, 1);
		_Boolean.addOutputs([_Math]);
		_Math.addInput(_Boolean, 0);
		_Math.addOutputs([_MathExpression]);
		_MathExpression.addInput(_Math, 0);
		_MathExpression.addInput(_Math_001, 0);
		var _Vector = new armory.logicnode.VectorNode(this);
		_Vector.addInput(_MathExpression, 0);
		var _MathExpression_001 = new armory.logicnode.MathExpressionNode(this);
		_MathExpression_001.property0 = "(a-b)*50";
		_MathExpression_001.property1 = false;
		var _Math_002 = new armory.logicnode.MathNode(this);
		_Math_002.property0 = "Add";
		_Math_002.property1 = "false";
		var _Integer_002 = new armory.logicnode.IntegerNode(this);
		_Integer_002.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_002.addOutputs([_Math_002]);
		_Math_002.addInput(_Integer_002, 0);
		var _Boolean_001 = new armory.logicnode.BooleanNode(this);
		var _Keyboard = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard.property0 = "down";
		_Keyboard.property1 = "a";
		var _RotateObject_001 = new armory.logicnode.RotateObjectNode(this);
		_RotateObject_001.property0 = "Angle Axies (Degrees)";
		_RotateObject_001.addInput(_Keyboard, 0);
		_RotateObject_001.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_RotateObject_001.addInput(new armory.logicnode.VectorNode(this, 0.0, -3.725290298461914e-09, 0.29999998211860657), 0);
		_RotateObject_001.addInput(new armory.logicnode.FloatNode(this, 3.0), 0);
		_RotateObject_001.addOutputs([new armory.logicnode.NullNode(this)]);
		_Keyboard.addOutputs([_RotateObject_001]);
		_Keyboard.addOutputs([_Boolean_001]);
		_Boolean_001.addInput(_Keyboard, 1);
		_Boolean_001.addOutputs([_Math_002]);
		_Math_002.addInput(_Boolean_001, 0);
		_Math_002.addOutputs([_MathExpression_001]);
		_MathExpression_001.addInput(_Math_002, 0);
		var _Math_003 = new armory.logicnode.MathNode(this);
		_Math_003.property0 = "Add";
		_Math_003.property1 = "false";
		var _Integer_003 = new armory.logicnode.IntegerNode(this);
		_Integer_003.addInput(new armory.logicnode.IntegerNode(this, 0), 0);
		_Integer_003.addOutputs([_Math_003]);
		_Math_003.addInput(_Integer_003, 0);
		var _Boolean_003 = new armory.logicnode.BooleanNode(this);
		var _Keyboard_002 = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard_002.property0 = "down";
		_Keyboard_002.property1 = "d";
		var _RotateObject = new armory.logicnode.RotateObjectNode(this);
		_RotateObject.property0 = "Angle Axies (Degrees)";
		_RotateObject.addInput(_Keyboard_002, 0);
		_RotateObject.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_RotateObject.addInput(new armory.logicnode.VectorNode(this, 0.0, -3.725290298461914e-09, -0.29999998211860657), 0);
		_RotateObject.addInput(new armory.logicnode.FloatNode(this, 3.0), 0);
		_RotateObject.addOutputs([new armory.logicnode.NullNode(this)]);
		_Keyboard_002.addOutputs([_RotateObject]);
		_Keyboard_002.addOutputs([_Boolean_003]);
		_Boolean_003.addInput(_Keyboard_002, 1);
		_Boolean_003.addOutputs([_Math_003]);
		_Math_003.addInput(_Boolean_003, 0);
		_Math_003.addOutputs([_MathExpression_001]);
		_MathExpression_001.addInput(_Math_003, 0);
		_MathExpression_001.addOutputs([_Vector]);
		_Vector.addInput(_MathExpression_001, 0);
		_Vector.addInput(new armory.logicnode.FloatNode(this, 50.0), 0);
		var _ApplyForce_002 = new armory.logicnode.ApplyForceNode(this);
		var _Keyboard_017 = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard_017.property0 = "down";
		_Keyboard_017.property1 = "e";
		_Keyboard_017.addOutputs([_ApplyForce_002]);
		_Keyboard_017.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_ApplyForce_002.addInput(_Keyboard_017, 0);
		_ApplyForce_002.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_ApplyForce_002.addInput(_Vector, 0);
		_ApplyForce_002.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce_002.addOutputs([new armory.logicnode.NullNode(this)]);
		_Vector.addOutputs([_ApplyForce_002]);
		_MathExpression.addOutputs([_Vector]);
		_Math_001.addOutputs([_MathExpression]);
		_Boolean_002.addOutputs([_Math_001]);
		_Keyboard_001.addOutputs([_Boolean_002]);
		_ApplyForce_001.addInput(_Keyboard_001, 0);
		_ApplyForce_001.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_ApplyForce_001.addInput(new armory.logicnode.VectorNode(this, -10.0, 0.0, 3.725290298461914e-09), 0);
		_ApplyForce_001.addInput(new armory.logicnode.BooleanNode(this, true), 0);
		_ApplyForce_001.addOutputs([new armory.logicnode.NullNode(this)]);
		var _SetRBVelocity = new armory.logicnode.SetVelocityNode(this);
		var _SetObjectLocation = new armory.logicnode.SetLocationNode(this);
		var _Keyboard_018 = new armory.logicnode.MergedKeyboardNode(this);
		_Keyboard_018.property0 = "down";
		_Keyboard_018.property1 = "q";
		_Keyboard_018.addOutputs([_SetObjectLocation]);
		_Keyboard_018.addOutputs([new armory.logicnode.BooleanNode(this, false)]);
		_SetObjectLocation.addInput(_Keyboard_018, 0);
		_SetObjectLocation.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_SetObjectLocation.addInput(new armory.logicnode.VectorNode(this, -2.8849101066589355, 10.0, 12.080400466918945), 0);
		_SetObjectLocation.addOutputs([_SetRBVelocity]);
		_SetRBVelocity.addInput(_SetObjectLocation, 0);
		_SetRBVelocity.addInput(new armory.logicnode.ObjectNode(this, "Cube.001"), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 0.0, 0.0, 0.0), 0);
		_SetRBVelocity.addInput(new armory.logicnode.VectorNode(this, 1.0, 1.0, 1.0), 0);
		_SetRBVelocity.addOutputs([new armory.logicnode.NullNode(this)]);
	}
}